{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d3596f97",
   "metadata": {},
   "source": [
    "# Congnifyz Internship Program\n",
    "\n",
    "## Restaurant Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7a7db6c",
   "metadata": {},
   "source": [
    "-------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf3ac3a8",
   "metadata": {},
   "source": [
    "### **Author : Mayur Padore**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f9ff51c",
   "metadata": {},
   "source": [
    "### Level 2 : \n",
    "\n",
    "**Task 1 : Table Booking and Online Delivery**\n",
    "\n",
    "    - Determine the percentage of restaurants that offer table booking and online delivery.\n",
    "    \n",
    "    - Compare the average ratings of restaurants with table booking and those without.\n",
    "    \n",
    "    - Analyze the availability of online delivery among restaurants with different price ranges.\n",
    "    \n",
    "    \n",
    "**Task 2 : Price Range Analysis**\n",
    "\n",
    "    - Determine the most common price range among all the restaurants.\n",
    "    \n",
    "    - Calculate the average rating for each price range & Identify the color that represents the highest average rating \n",
    "    among different price ranges.\n",
    "    \n",
    "    \n",
    "**Task 3 : Feature Engineering**\n",
    "\n",
    "    - Extract additional features from the existing columns, such as the length of the restaurant name or address.\n",
    "    \n",
    "    - Create new features like \"Has Table Booking\"or \"Has Online Delivery\" by encoding categorical variables.\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af4fe090",
   "metadata": {},
   "source": [
    "----------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "65945bf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the Warning\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "63b9255e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the libraries which are we going to use for EDA\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns; sns.set(color_codes=True)\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e051890f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the Dataset\n",
    "\n",
    "df1 = pd.read_csv(\"new_Dataset.csv\")  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ab9cad5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Restaurant ID           0\n",
       "Restaurant Name         0\n",
       "Country Code            0\n",
       "City                    0\n",
       "Address                 0\n",
       "Locality                0\n",
       "Locality Verbose        0\n",
       "Longitude               0\n",
       "Latitude                0\n",
       "Cuisines                0\n",
       "Average Cost for two    0\n",
       "Currency                0\n",
       "Has Table booking       0\n",
       "Has Online delivery     0\n",
       "Is delivering now       0\n",
       "Switch to order menu    0\n",
       "Price range             0\n",
       "Aggregate rating        0\n",
       "Rating color            0\n",
       "Rating text             0\n",
       "Votes                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2f514ab1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9551 entries, 0 to 9550\n",
      "Data columns (total 21 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   Restaurant ID         9551 non-null   int64  \n",
      " 1   Restaurant Name       9551 non-null   object \n",
      " 2   Country Code          9551 non-null   int64  \n",
      " 3   City                  9551 non-null   object \n",
      " 4   Address               9551 non-null   object \n",
      " 5   Locality              9551 non-null   object \n",
      " 6   Locality Verbose      9551 non-null   object \n",
      " 7   Longitude             9551 non-null   float64\n",
      " 8   Latitude              9551 non-null   float64\n",
      " 9   Cuisines              9551 non-null   object \n",
      " 10  Average Cost for two  9551 non-null   int64  \n",
      " 11  Currency              9551 non-null   object \n",
      " 12  Has Table booking     9551 non-null   object \n",
      " 13  Has Online delivery   9551 non-null   object \n",
      " 14  Is delivering now     9551 non-null   object \n",
      " 15  Switch to order menu  9551 non-null   object \n",
      " 16  Price range           9551 non-null   int64  \n",
      " 17  Aggregate rating      9551 non-null   float64\n",
      " 18  Rating color          9551 non-null   object \n",
      " 19  Rating text           9551 non-null   object \n",
      " 20  Votes                 9551 non-null   int64  \n",
      "dtypes: float64(3), int64(5), object(13)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "df1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2822965a",
   "metadata": {},
   "source": [
    "# Level 2 - Task 1:- \n",
    "\n",
    "## Task: Table Booking and Online Delivery"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccdeae64",
   "metadata": {},
   "source": [
    "##### 1. Determine the percentage of restaurants that offer table booking and online delivery."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "823d12b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No     8393\n",
       "Yes    1158\n",
       "Name: Has Table booking, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for value counts\n",
    "\n",
    "df1[\"Has Table booking\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b6c858b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "No     7100\n",
       "Yes    2451\n",
       "Name: Has Online delivery, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1[\"Has Online delivery\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b9621e64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table Booking :  12.12 %\n",
      "Online Delivery :  25.66 %\n"
     ]
    }
   ],
   "source": [
    "print(\"Table Booking : \", round((1158/(8393+1158)) *100, 2),\"%\")\n",
    "\n",
    "print(\"Online Delivery : \", round((2451/(7100+2451)) *100, 2),\"%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2d1794fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Another way to find the percentage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "73795e72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of Restaurants offers table booking: 12.12 %\n",
      "\n",
      "Percentage of Restaurants offers online delivery: 25.66 %\n"
     ]
    }
   ],
   "source": [
    "# Number of restaurants offering table booking & online delivery\n",
    "\n",
    "table_booking = df1['Has Table booking'].value_counts().get('Yes')\n",
    "\n",
    "online_delivery = df1['Has Online delivery'].value_counts().get('Yes')\n",
    "\n",
    "# Calculate the percentage for table booking * online delivery\n",
    "\n",
    "percentage_table_booking = (table_booking / len(df1)) * 100\n",
    "\n",
    "percentage_online_delivery = (online_delivery / len(df1)) * 100\n",
    "\n",
    "print(f\"Percentage of Restaurants offers table booking: {percentage_table_booking:.2f} %\\n\")\n",
    "print(f\"Percentage of Restaurants offers online delivery: {percentage_online_delivery:.2f} %\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef4772a7",
   "metadata": {},
   "source": [
    "##### 2. Compare the average ratings of restaurants with table booking and those without."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "228ebfe0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rows With Table Booking : (1158, 21)\n",
      "Rows Without Table Booking : (8393, 21)\n"
     ]
    }
   ],
   "source": [
    "# Filter the DataFrame for rows with 'Yes' & 'No' in the 'Table Booking' column\n",
    "\n",
    "df_with_table_booking = df1[df1['Has Table booking'] == 'Yes']\n",
    "\n",
    "df_without_table_booking = df1[df1['Has Table booking'] == 'No']\n",
    "\n",
    "# After filtering rows with and without table booking\n",
    "\n",
    "print(\"Rows With Table Booking :\", df_with_table_booking.shape)\n",
    "\n",
    "print(\"Rows Without Table Booking :\", df_without_table_booking.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "54bd0dc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Ratings:- \n",
      " With Table Booking :  3.44\n",
      " Without Table Booking :  2.56\n"
     ]
    }
   ],
   "source": [
    "# Average Ratings of Restaurants\n",
    "\n",
    "print(\"Average Ratings:- \")\n",
    "print(\" With Table Booking : \", round(df_with_table_booking[\"Aggregate rating\"].mean(),2))\n",
    "print(\" Without Table Booking : \", round(df_without_table_booking[\"Aggregate rating\"].mean(),2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29651cc4",
   "metadata": {},
   "source": [
    "##### 3. Analyze the availability of online delivery among restaurants with different price ranges."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d5efeb68",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "